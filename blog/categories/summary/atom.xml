<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: summary | 唐巧的技术博客]]></title>
  <link href="http://blog.devtang.com/blog/categories/summary/atom.xml" rel="self"/>
  <link href="http://blog.devtang.com/"/>
  <updated>2016-01-19T21:29:28+08:00</updated>
  <id>http://blog.devtang.com/</id>
  <author>
    <name><![CDATA[唐巧]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[教你阅读图书的「方法论」- 评《如何阅读一本书》]]></title>
    <link href="http://blog.devtang.com/blog/2016/01/17/how-to-read-a-book-summary/"/>
    <updated>2016-01-17T09:58:18+08:00</updated>
    <id>http://blog.devtang.com/blog/2016/01/17/how-to-read-a-book-summary</id>
    <content type="html"><![CDATA[<p><img src="/images/how-to-read-a-book.jpg"></p>

<h3>引言</h3>

<p>最近常圳给我推荐了 <a href="http://item.jd.com/11435655.html">《如何阅读一本书》</a> 这本书。这本书最初出版于 1940 年，然后于 1970 年进行了增补改写。到现在已经面世 70 多年，在我写这篇笔记的时候，该书在京东上的 <a href="http://book.jd.com/booktop/0-0-0.html?category=3281-0-0-0-10001-1">销售排名</a> 位于社会科学销量榜第 2 名，可见该书是多么畅销。</p>

<p>在花两周读完本书之后，我最大的收获是学会了如何更加科学地阅读。在本书中，作者将阅读分为四个层次，并且逐条讲解每一个层次的阅读方法，以及需要达到的目标。本书将阅读分为如下四个层次：</p>

<ol>
<li>基础阅读</li>
<li>检视阅读</li>
<li>分析阅读</li>
<li>主题阅读</li>
</ol>


<p>我一直对这 4 个偏学术的名词记不太清，我对这四个层次的理解如下：</p>

<ol>
<li>基础阅读，是指基本的识字和认识能力，能够知道每个字和句子表面的意思。这个确实也没什么好多说的，全书第 3 章花了一共 8 页简单介绍了一下。我想这一层次的内容主要可以使得全书的理论结构更加完整。</li>
<li>检视阅读，是指的快速获得图书重要信息的能力，其实就是略读。但是本书有价值的地方在于，他提供了一套略读的方法指导，使得你能够更科学地快速获得全书的概要信息。</li>
<li>分析阅读，其实就是精读，作者对于分析阅读提出了一系列问题，让我们通过回答这些问题，来辅助我们获得书本背后作者想传达的思想。</li>
<li>主题阅读，其实就是把含有相似内容的书籍综合起来一起读，从而对目标知识产生更全面的理解。这就像我们大学时要写某个具体领域的研究论文，然后就会用一些关键词在学校图书馆或期刊上搜索，然后把这些同一领域的图书或期刊都借出来系统学习。</li>
</ol>


<p> 所以，我认为本书的牛逼之处并不在于提出了阅读的 4 个层次，即使没有本书，我们在实际生活中也会自觉的在阅读中，根据自己的需要，采用不同的层次来阅读。本书之所以受欢迎，是因为它对于每个阅读层次，都有一套具体的、可执行的操作方法，有了这套「方法论」，大家可以按步就班地来做更加科学地阅读。</p>

<p>我们常常会出现这样一个对话场景：</p>

<p><blockquote><p></p></p><p><p>A 说：「某某书你看过了吗？」<br/>B 回答说：「看过了，挺不错的！」<br/>A 问：「讲了什么？」<br/>B 说：「呃。。。不记得了。」</p></p><p><p></p></blockquote></p>

<p>我想《如何阅读一本书》的价值就在于这儿吧，它让以上这种场景尽可能地避免了。我们来看看它的「方法论」到论是什么样的。</p>

<h3>检视阅读</h3>

<p>基础阅读我就不介绍了。因为基本的识字和认识能力应该是每一个成年人都应该具有的。我们直接来看看检视阅读的方法。</p>

<p>检视阅读的第一阶段：系统的略读。具体的做法如下：</p>

<ol>
<li>先看书名页，然后如果有序就先看序。</li>
<li>研究目录页。</li>
<li>如果书中附有索引，也要检阅一下。</li>
<li>读一下出版者的介绍（如果有）。</li>
<li>开始挑几个看起来跟主题息息相关的篇章来看。</li>
<li>把书打开，随意浏览，念个一两段，有时候连续读几页，但不要太多。</li>
</ol>


<p>检视阅读的第二阶段：</p>

<ol>
<li>不要在不懂的地方停下来深究（查询或思索）。</li>
<li>注意阅读速度（文中还介绍了一些速读的技巧：如避免「半出声」的阅读，用手指快速移动来控制眼睛停留时间等）。</li>
</ol>


<h3>分析阅读</h3>

<p>作者认为一个主动的阅读者，需要解决如下四个问题：</p>

<ol>
<li>这本书整体上在谈些什么？</li>
<li>作者细部说了什么，怎么说的？</li>
<li>这本书讲得是否有道理？是全部有道理，还是部分有道理？</li>
<li>这本书跟你有什么关系？</li>
</ol>


<p>为了解决以上问题，作者将分析阅读分成如下几个阶段。</p>

<p>第一阶段（解决问题 1），找出一本书在谈些什么的四个规则：</p>

<ol>
<li>依照书本的科类与主题作分类。</li>
<li>用最简短的句子说出整本书在谈些什么。</li>
<li>按照顺序或关系，列出全书的重要部分。</li>
<li>找出作者在问的问题，或作者想解决的问题。</li>
</ol>


<p>第二阶段（解决问题 2）：诊释一本书的内容规则</p>

<ol>
<li>诊释作者的关键字，与他达成共识。</li>
<li>由最重要的句子中，抓住作者的重要主旨。</li>
<li>知道作者的论述是什么，从内容中找出相关的句子，再重新架构出来。</li>
<li>确定作者已经解决了哪些问题，还有哪些是没解决的。再判断哪些是作者知道他没解决的问题。</li>
</ol>


<p>第三阶段（解决问题 3 和 4）：像是沟通知识一样地评论一本书的规则</p>

<ol>
<li><p>智慧礼节的一般规则：</p>

<ul>
<li>除非你已经完成大纲架构，也能诠释整本书了，否则不要轻易批评。</li>
<li>不要争强好胜，非辩到底不可。</li>
<li>在说出评论之前，你要能证明自己区别得出真正的知识与个人观点的不同。</li>
</ul>
</li>
<li><p>批评观点的特别标准：</p>

<ul>
<li>证明作者的知识不足。</li>
<li>证明作者的知识错误。</li>
<li>证明作者不合逻辑。</li>
<li>证明作者的分析与理由是不完整的。</li>
</ul>
</li>
</ol>


<p>在我看来，第三阶段指出的批评观点的标准，使得人们更加容易清楚自己的立场是如何而来的。作者是这样说的：「如何你不能用相关证据显示作者是知识不足、知识有误，或不合逻辑，你就不能反对他」。很多人面对一些结论的时候，表现出强烈的反对，但是如果你发现他不能按以上标准来反对的话，就说明他并不真正在反对，只是「不喜欢」这个结论，而这只是在表达一种情绪或者偏见。我们应该尽量避免陷入情绪中，或者至少应该在陷入情绪中时，知道自己当前只是在发泄，而不是在讨论问题。</p>

<h3>主题阅读</h3>

<p>作者将主题阅读分为两个阶段。</p>

<p>第一阶段：准备：</p>

<ol>
<li>针对要研究的主题，列出书单。</li>
<li>浏览书单中的书，确定哪些与你的主题相关，并就你的主题建立起清楚的概念。</li>
</ol>


<p>第二阶段：阅读：</p>

<ol>
<li>从书单中的书中，找出与主题最相关的章节。</li>
<li>根据主题创造出一套中立的词汇，带引作者与你达成共识。</li>
<li>建立一个中立的主旨，列出一连串的问题，使大多数的作者为解读这些问题提供了他们的回答。</li>
<li>界定主要及次要的议题。然后将作者针对各个问题的不同意见整理陈列在各个议题之旁。</li>
<li>分析这些讨论。</li>
</ol>


<p>主题阅读的理想上要保持客观，当你要解读作者的某个观点时，必须从他文章中引一段话来并列。</p>

<h2>总结</h2>

<p>《如何阅读一本书》是一本用「方法论」来指导阅读行为的图书。这本书将阅读分为四个阶段，每个阶段又细分为一些具体的执行方法。使用书中介绍的方法，可以使得我们更快、更有效地获取图书中的关键信息。</p>

<p>更宽泛地说，《如何阅读一本书》培养的是一种获取有效信息的手段和习惯，不管是阅读图书，还是阅读博客、邮件以及平时讨论问题，我们都可以利用书中提到的分析阅读的方法，来获得有效的信息。另外，当涉及争论时，书提到的批评别人观点的方法也非常客观，这会使得大家的争论会更加理智。</p>

<p>本书不太好的地方在于内容太过啰嗦，如果能够将内容再精简一半，我可能会更喜欢一些。另外，将「略读」和「精读」换个名字成「检视阅读」和「分析阅读」，也让我觉得有些太夸张了一些。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015 年个人总结]]></title>
    <link href="http://blog.devtang.com/blog/2016/01/02/2015-summary/"/>
    <updated>2016-01-02T19:08:13+08:00</updated>
    <id>http://blog.devtang.com/blog/2016/01/02/2015-summary</id>
    <content type="html"><![CDATA[<h2>关于创业</h2>

<p>今年猿题库顺利拿到了 D 轮 6000 万美元的 <a href="http://36kr.com/p/531286.html">融资</a>，估值 3.6 亿美元。而我负责的 <a href="http://www.yuansouti.com/">小猿搜题</a>，也从年初的几十万用户，增长到了 5000 多万用户。</p>

<p>今年是小猿搜题的风光年，我们上了「天天向上」，在各种黄金档节目中打电视广告，整体用户数据增长惊人。研究组、市场运营、内容部门各种给力，使得产品技术工作进展得非常顺利。</p>

<p>下图是小猿搜题登上 AppStore 教育榜榜首的截图。</p>

<p><img src="/images/xyst_appstore_1.jpg"></p>

<h2>我的工作</h2>

<p>对于我自己来说，2015 年的工作主要分成上半年和下半年两个阶段。</p>

<p>上半年，我一边负责小猿搜题的 iOS 开发工作，一边负责小猿搜题技术团队的组建和协调工作。小猿搜题当前大部分同事都是在上半年入职到这个团队的。</p>

<p>下半年，团队成员磨合得差不多了，团队里面 iOS 同事也成长起来了，我自己能够从 iOS 具体的开发工作中脱身，使得我更多地关注产品和团队了。</p>

<p>下半年自己的工作主要聚焦到了管理业务和管理团队上，每天组织协调和沟通的事情很多，除了 Scrum 的定期会议外，我还得参加产品的 Scrum 会议和产品过稿，还有美术的过稿。另外，我时不时也需要和运营的同事沟通协调。</p>

<p>有时候忙完一整天不知道时间是如何过去的，然后又看着自己 iOS 开发技能慢慢变弱，有一种焦虑感。于是我首先开始多读书，接着就是总结，试图调整自己。</p>

<p>数据分析的工作让我知道任何的改进都是应该基于数据的，这样更加理性。所以，我拿了一个小本子，记录自己每天的详细时间花费情况。于是就有了下图这样的一页一页的记录。</p>

<p><img src="/images/evernotes.jpg"></p>

<p>这样大概记录了一周多，我基本上知道了自己的时间是如何花掉的了。然后，我开始归类自己的时间花费，看看主要花在了哪些地方。对于一些优先级不高的事情，我会注意调整它，不要让它把重要的事情给耽误了。</p>

<p>我也开始总结一个产品技术负责人的工作。在想得差不多了之后，我利用每周一早上和 CTO 的沟通机会进行讨论，最终，我完成了文章：<a href="http://blog.devtang.com/blog/2015/12/18/from-dev-to-manager/">《涅槃重生:我的技术转管理之路》</a>，并且在北京架构师峰会上做了相应的技术转管理分享。</p>

<p>现在我不那么焦虑了，不过觉得自己还是需要多学习和提高。</p>

<h2>图书出版</h2>

<p><a href="http://item.jd.com/11598468.html">《iOS 开发进阶》</a> 在 2015 年 1 月份顺利出版，然后首印 3000 册迅速卖掉了，出版社加印了 2000 册，然后过一周又卖光了，然后他们加印了 5000 册。之后又陆续有加印，最终到年底的时候，《iOS 开发进阶》销售了 17000 册，我听出版社老师说，这个成绩在技术图书里面是算相当好的。</p>

<p><img src="/images/ios_pro_17000.jpg"></p>

<p>虽然称不上完美无缺，我个人对这本书的自评是问心无愧的。我用 Scrum 的管理方式来管理这本书的写作过程，我想在互联网时代，按时发布产品比什么都重要，所以，虽然有很多想继续完善的地方，我还是把它付印了。我也把写这本书的过程总结下来，完成了 <a href="http://blog.devtang.com/blog/2015/01/11/how-to-finish-ios-pro-book/">《我是如何完成《iOS 开发进阶》的编写的》</a>，希望能给想出书的同行一些帮助。</p>

<p>由于我从一线 iOS 开发工作中脱离，《iOS 开发进阶》很可能不会再更新出第二版了，17000 册这个成绩，对于当时 30 岁的我来说，还算是一个不错的里程碑。这次写作让我感受到了出版的乐趣，其实我自己还在蕴量一些写作素材，或许以后会给大家一些新的分享。</p>

<h2>写作</h2>

<p>今年在博客上完成了 45 篇原创博客文章，差不多一周一篇的节奏。因为 iOS 开发做得少了，所以我的文章中涉及 iOS 开发技术细节的内容少了很多。</p>

<p>我仔细分析了一下今年的博客文章，内容涉及面很广。包括一些 iOS 开发方面的文章，如：</p>

<ul>
<li><a href="http://blog.devtang.com/blog/2015/01/31/write-sdk-tips/">写 iOS SDK 注意事项</a></li>
<li><a href="http://blog.devtang.com/blog/2015/03/15/ios-dev-controversy-1/">iOS 开发中的争议（一）</a></li>
<li><a href="http://blog.devtang.com/blog/2015/03/22/ios-dev-controversy-2/">iOS 开发中的争议（二）</a></li>
<li><a href="http://blog.devtang.com/blog/2015/11/02/mvc-and-mvvm/">被误解的 MVC 和被神化的 MVVM</a></li>
</ul>


<p>另外，我也向「娱乐记者」转变，采访了一些国内新出现的 iOS 大牛，以及报道一些行业新闻，比如</p>

<ul>
<li><a href="http://blog.devtang.com/blog/2015/06/16/talk-about-swift-open-source/">谈谈苹果开源 Swift</a></li>
<li><a href="http://blog.devtang.com/blog/2015/11/26/yykit-auther-interview/">专访 YYKit 作者 ibireme: 开源大牛是怎样炼成的</a></li>
</ul>


<p>我更不务正业地写起了硬件的评测：</p>

<ul>
<li><a href="http://blog.devtang.com/blog/2015/06/28/apple-watch-usage-exp/">Apple Watch 使用体验</a></li>
</ul>


<p>当然，最离谱的就是我开始卖软件了，我和荔枝数码合作先后卖了 Reveal 和 Charles 两款 iOS 开发中需要的效率工具软件，也为此写了一些文章：</p>

<ul>
<li><a href="http://blog.devtang.com/blog/2015/05/25/can-we-buy-time/">Reveal 中国特惠活动</a></li>
<li><a href="http://blog.devtang.com/blog/2015/11/14/charles-introduction/">Charles 从入门到精通 (中国 5 折特惠)</a></li>
</ul>


<p>因为工作关系，我也开始总结自己的技术转管理收获，完成了：</p>

<ul>
<li><a href="http://blog.devtang.com/blog/2015/10/25/one-on-one-summary/">浅析一对一沟通</a></li>
<li><a href="http://blog.devtang.com/blog/2015/12/18/from-dev-to-manager/">涅槃重生:我的技术转管理之路</a></li>
</ul>


<p>在产品工作上面，总结了：</p>

<ul>
<li><a href="http://blog.devtang.com/blog/2015/09/02/why-we-need-monitor-data/">数据的秘密（上）- 为什么要关注数据</a></li>
<li><a href="http://blog.devtang.com/blog/2015/09/03/how-to-monitor-data/">数据的秘密（下）- 如何分析数据</a></li>
</ul>


<h2>读书</h2>

<p>另外，今年开始认真写读书笔记，完成了：</p>

<ul>
<li><a href="http://blog.devtang.com/blog/2015/03/01/tipping-point/">《引爆点》读书心得</a></li>
<li><a href="http://blog.devtang.com/blog/2015/04/04/from-0-to-1-book-summary/">《从 0 到 1 》读书笔记</a></li>
<li><a href="http://blog.devtang.com/blog/2015/08/01/become-a-tech-leader-summary/">《成为技术领导者》读书心得</a></li>
<li><a href="http://blog.devtang.com/blog/2015/08/02/the-story-of-success-book-summary/">《异类》读书心得</a></li>
<li><a href="http://blog.devtang.com/blog/2015/08/22/reverse-book-summary/">《逆转》读书心得</a></li>
</ul>


<p>其实还看了一些别的书，包括《格鲁夫给经理人的第一课》、《增长黑客》、《领导梯队》等，但是都没有完成笔记，之后打算补上。</p>

<p>iOS 技术图书也看了不少，要说推荐，还是王巍的 <a href="https://selfstore.io/products/171">《Swifter》</a> 和 Kevin 的 <a href="https://selfstore.io/products/367">《Producter》</a> 。《Swifter》适合给新手入门用，《Producter》是一本跨界的书，适合 iOS 开发者用来开拓自己的眼界。</p>

<h2>好奇心</h2>

<p>2015 年我特别提醒自己要有好奇心，于是就做了很多有趣的事情。</p>

<p>比如，因为搬家和装修，我自己学习了换门锁、换马桶盖子、换马桶的上水管、组装板材家俱、在墙上钻孔这些技能，感觉还挺有意思的，有些时候就感觉在摆弄大号的积木玩具一样。</p>

<p>比如，因为对社群经济感兴趣，交了 1024 元加入了池建强和李笑来老师建的付费群。</p>

<p>比如，因为对 <a href="http://www.zaih.com/mentor/84802679/topic/29864843/">「在行」</a> 这个 App 感兴趣，在上面接单，约见了五位朋友。</p>

<p>好奇心给我带来了极大的收获，比如池老师的那个付费群，我最终不但收获了不少有意思的分享，而且学习了当前社群的运作模式。在「在行」上接单不但收到了一些咨询费，更多的是认识了很多有趣的人，比如说罗飞。</p>

<p>如果要说好奇心给我带来的最大收获，那可能就是「iOS 开发」微信公众号的运营了。</p>

<p>从时间上看，我的「iOS 开发」微信公众号已经运营 3 年多了：</p>

<ul>
<li>2013 年 2 月 21 日，我开始在微信公众号里发表 iOS 开发相关内容。</li>
<li>2013 年 12 月累积发表了 140 条信息，累积了 5600 名粉丝。</li>
<li>2014 年 12 月累积了 1 万名粉丝。</li>
<li>2015 年 12 月累积了 3 万名粉丝。</li>
</ul>


<p>最主要的是，我原本没指望做这个事情有什么收获，但是从 2015 年起，开始有各种互联网企业找我投放广告。在这里感谢我的主要广告主：</p>

<ul>
<li><a href="https://www.upyun.com/zh/index.html">UPYUN</a>：UPYUN 是国内领先的云服务提供商，专注于为开发者提供静态文件的云存储、云处理和 CDN 加速服务。</li>
<li><a href="http://100offer.com/">100Offer</a>：用「拍卖」的方式来提供高端互联网人才招聘的网站。</li>
<li><a href="http://www.lagou.com/">拉勾网</a>：最专业的互联网招聘平台，我自己就从上面招到了不少同事。</li>
<li><a href="http://www.infoq.com/cn">InfoQ</a>：InfoQ 了提供中国最高质量的技术会议和技术文章，我自己也是 InfoQ 的社区编辑。现在 InfoQ 创始人 Kevin 把业务做得更广，成立了 <a href="http://www.geekbang.org/">极客邦科技</a>，在极客邦科技之下，除了 InfoQ 之外，另外组建了高端技术人员社交网络 EGO、IT 职业学习平台 StuQ 和 企业
培训服务 GIT。</li>
</ul>


<p>再次感谢你们，是你们让我这个自媒体有肉吃。</p>

<p>同时，我也要感谢我的读者，谢谢你们忍受偶尔出现的广告。我仔细算了一下，现在广告的频率是每月 2-3 次。你们放心，我会努力控制广告频率，如果控制不住，我就会涨价的！</p>

<h2>未来的计划</h2>

<p>2016年，希望自己：</p>

<ul>
<li>每月至少完成一篇读书笔记。</li>
<li>每周坚持发至少一篇微信公众号文章。</li>
</ul>


<h2>个人 Milestone</h2>

<ul>
<li>小猿搜题团队组建成功，并且获得 5000 万用户量。</li>
<li>「iOS 开发」微信公众号获得了 3 万粉丝，并开始有广告收入。</li>
</ul>


<!--

22 次

100 offer
 * http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&mid=444425913&idx=1&sn=edae69f061b7e963b626ff0564e0d55c#rd
 * http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&mid=210036524&idx=1&sn=6ac23a8a4a518dac51bbf875da788df2#rd
 * http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&mid=209774617&idx=1&sn=f36182036013a89567bb150be29440d2#rd
 * http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&mid=209555090&idx=1&sn=64986a94516329f65be25166f7f05f39#rd
 * http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&mid=204693407&idx=1&sn=53f7e05318aaad91e09ab8ff7043459b#rd
 * http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&mid=204526037&idx=1&sn=f86643463659011430cd6bbf3538ca13#rd

lagou:
 * http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&mid=443546076&idx=1&sn=2fee1e70380a8c04e0b346a3fb36b3d9#rd

 * http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&mid=440158123&idx=1&sn=9b0452fba8ab687b902cb3110846dbe4#rd

 * http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&mid=400074920&idx=1&sn=cbfcdca750798cc16e92ff7997ed61fb#rd

 * http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&mid=209664745&idx=1&sn=eedfa5d8c5f7183997a22d06a4c3904e#rd

 * http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&mid=208301774&idx=1&sn=adffaef537aff67f01db3992be796c89#rd

 * http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&mid=206695843&idx=1&sn=2617a5966f347a98d6b9ef490f0292b4#rd

 * http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&mid=205584984&idx=1&sn=584e2913718833020cfd990465e3afe5#rd



infoQ:
 * http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&mid=421410076&idx=1&sn=8a6671aa72abfadb03cfb8f224523838#rd
 * http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&mid=405922788&idx=1&sn=e1f2a1e5b4ccddd2f0b31eefdafd56ae#wechat_redirect

pgyer:

http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&mid=420641198&idx=1&sn=f43c61cb451db72d4145fbaad089b8ba#rd 

BugTags:

http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&mid=209938150&idx=1&sn=4ff4715b21d88a384c747e098fa9c1aa#rd

UPYUN:
 * http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&mid=209728624&idx=1&sn=1ab063924d3d8863c7c66a9f820e34c7#rd
 * http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&mid=208075893&idx=1&sn=09164a9954092d12ba2a5eb341cb857b#rd

丰厚资本:

 * http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&mid=209397391&idx=1&sn=8e9ff6100379bd289a901c4aec400e8e#rd

借贷宝:
 * http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&mid=209067756&idx=1&sn=396d17ec6f2aefc6547ae488719ff669#rd

理财工场:
 * http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&mid=208847424&idx=2&sn=d26831cf3d4f41639c8fbf37ba662c55#rd

-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ 涅槃重生:我的技术转管理之路 ]]></title>
    <link href="http://blog.devtang.com/blog/2015/12/18/from-dev-to-manager/"/>
    <updated>2015-12-18T21:32:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/12/18/from-dev-to-manager</id>
    <content type="html"><![CDATA[<p><img src="/images/from-dev-to-manager-1.jpg"></p>

<h2>一个程序员的理想</h2>

<p>我从高中就开始接触计算机并开始编程，我非常喜欢编程，我一直以为我会写一辈子代码。</p>

<p>我从毕业就一直做技术，开始一年是做 Java 语言的服务器开发，开发过网易邮箱和微博的后台，后来转而做 iOS 开发。</p>

<p>因为喜欢，我几乎把我所有的非工作时间也投入到技术中去。当然，并非是把工作带回家，而是专研技术或者从事技术写作。</p>

<p>于是这几年，我积累了超过 150 篇原创技术文章，在 iOS 技术圈子里面也小有名气，也出版了一本《iOS 开发进阶》的书，微博和微信公众号的粉丝数也都超过了 3 万。</p>

<p>我做得很开心。</p>

<p>我一直以为，我会是一个好码农，我会一直在技术上深入下去。</p>

<p>但是，改变有些时候就是来得那么突然。</p>

<h2>涅槃重生</h2>

<p>我还记得那一天，2014 年 7 月 17 日，我当时受到邀请，在广州的微信分享 iOS 开发技术。当天晚上，我接到郭常圳（我们的 CTO）的电话，知道要做小猿搜题这个项目，并且这个项目「由我负责」。</p>

<p>于是，我开始了技术转管理之路。</p>

<p>通过从以前的项目组中抽调人手，小猿搜题这个产品技术团队很快组建出来了。我在开发 iOS 版的小猿搜题客户端的同时，也开始了我的管理工作。</p>

<p>现在经过了一年半，我们不但组建成了一支充满战斗力的团队，成收获了不小的成绩：</p>

<ul>
<li>小猿搜题产品一年时间获得了 5000 万的用户。</li>
<li>我们团队在开发上做到了每周一次迭代，两周一次版本发布。</li>
</ul>


<h2>技术管理的总结</h2>

<p>在我的工作中，我慢慢总结出在创业公司中做技术管理工作的「方法论」。我把我的技术管理工作分成以下几个部分：管理业务，管理团队，管理技术。</p>

<h3>管理业务</h3>

<p>做为互联网公司，我们奉行简单直接的沟通，所以我很多时候并不需要涉及人员的管理工作，更多的时候是业务的管理工作。业务的管理工作主要是围绕着一个具体要做的技术开发功能点展开。具体包括：</p>

<ul>
<li>任务分解和分配</li>
<li>制定大概的开发排期</li>
<li>每天了解开发进度</li>
<li>讨论和跟进各种具体的技术问题</li>
<li>协调一些产品需求变更</li>
<li>响应一些市场同事的需求</li>
<li>跟进相关功能上线</li>
</ul>


<p>在这方面，我们主要是采用 <a href="https://www.scrum.org/">Scrum</a> 的开发方式，见<a href="http://blog.devtang.com/blog/2014/09/13/scrum-introduction/">《适合码农工作时玩的游戏：Scrum》</a>。</p>

<p>我们在整个迭代（Sprint）过程中引入四个会议：计划会议，每日站会，评审会议和回顾会议。通过事先简单的计划，再加上这四个会议中的详细讨论，我基本能够做到：</p>

<ul>
<li>通过计划会议：比较合理的安排开发排期、分配任务。</li>
<li>通过每日站会：每天了解开发进度，会后讨论和跟进各种具体的技术问题</li>
</ul>


<p>对于产品需求变更和市场同事需求的响应，我主要利用自己在 Sprint 执行过程中的时间来展开。我会根据当前需求的大小和紧迫程度，来决定是否插入到当前的 Sprint 中。如果插入到当前的 Sprint 工作量太大，我会适当做一些 Sprint 内容的调整。</p>

<p>跟进相关功能的上线主要是开发快要结束的时期，我会和产品同事一起试用最新的功能，了解 Bug 修复的进度，上线的风险情况。在大部分出现风险的情况下，我们都希望用适度加班的方式解决，所以我们上线当晚有时候会工作得比较晚。在无论如何都搞不定的情况下，我们可能会调整上线时间。</p>

<p>在业务涉及跨部门合作的时候，相关的进度管理会更麻烦一些。因为各部门自己的进度安排不一致，所以就会存在「等着联调」的情况。另外联调时出现问题也容易出现没人主动出来解决的情况。这些都需要负责人更频繁地沟通和推进，以保证按时上线。</p>

<p>在每周的工作中，我的管理业务的工作大概花费是 2 天左右。</p>

<h3>管理团队</h3>

<p>刚刚也说到，互联网公司不怎么需要管人，那么管理团队主要是做什么事情呢？我认为主要是两件事情：招人和带人，所谓的搭班子和带队伍。</p>

<h4>招人</h4>

<p>招聘这事情实在太重要了，所以必须要团队负责人参与。人才的招聘除了从公开的渠道收取简历、从猎头或同事那里得到推荐以外，还包括定向的找一些自己熟悉的前同事或某个领域的知名大牛，这些工作都是非常花费时间的。</p>

<p>在招人上，我们主要用到了找前同事，内部推荐发伯乐奖，以及进行技术分享和开源代码来获得社区影响力的方式。</p>

<p>值得一提的是，我们对于开源社区的贡献也得到了肯定，我们的基础架构组负责人陈恒因为多次为 Hbase 贡献代码，所以成为了 Hbase 的 Committer，而全中国拥有 Hbase 的 Committer 的公司在此之前只有三家，而且中国的 Hbase 的 Committer 不到 10 人。</p>

<p>在每周的工作中，招聘大概会占用我半天到一天的时间。</p>

<h4>带人</h4>

<p>人才招进来了，能否顺利融入团队，团队负责人以及这个人的导师（mentor）非常重要。需要做的事情包括：</p>

<ul>
<li>平时多交流沟通。</li>
<li>在新人遇到问题时，热心地解答。</li>
<li>引导新人熟悉公司的工作方式。</li>
</ul>


<p>一对一沟通来源于 Intel 公司，在最近很火的一本书 <a href="http://item.jd.com/11645500.html">《创业维艰》</a> 中里面也提到过。《创业维艰》的作者本·霍洛维茨是被誉为「硅谷最牛的 50 个天使投资人」之一，先后在初期投资了 Facebook、Twitter、Groupon、Skype。</p>

<p>他在书中对一对一沟通介绍到，一对一沟通最主要的意义是：可以使得信息从下而上地传递。从而获得在其它渠道不易获得的信息，保证透明。</p>

<p>适合一对一沟通的内容有很多，包括：</p>

<ol>
<li>不成熟的看法</li>
<li>迫在眉睫的问题</li>
<li>精彩的想法</li>
<li>倾诉焦虑</li>
<li>抱怨</li>
</ol>


<p>这些内容都不适合在别的场景中出现，比如：不成熟的看法，如果在部门的正常会议或邮件中提出，会让人觉得未经过深思熟虑。又比如一些焦虑或抱怨，如果通过一些渠道宣泄给其他同事，其实也是不好的。一对一沟通让这些内容有了一个不错的出口。</p>

<p>5 年前我刚毕业加入网易有道的时候，我的老大，也是我现在创业公司的 CTO 郭常圳就开始和我做一对一沟通。我非常享受每次沟通的过程。现在我也开始和别人做一对一沟通，我也开始关注一对一沟通的技巧。我们认为最大的技巧是：作为管理者，要多听少说，让员工成为沟通的中心。郭常圳有一个特别「老土」的办法，就是：不主动说话。通过这种方式，强迫让员工选择他们想聊的话题。</p>

<p>在《创业维艰》一书中，也介绍了一些适合用来引导的问题：</p>

<ul>
<li>当前产品还有哪些可以提高的地方？</li>
<li>我们部门的最大问题是什么，为什么？</li>
<li>如果有，你觉得工作中有哪一点令你感觉不舒服？</li>
<li>你觉得谁的工作最优秀，为什么？</li>
<li>我们的产品哪方面不尽如人意？</li>
<li>我们错失的最大机遇是什么？</li>
<li>哪些是我们应该做而没有做的？</li>
<li>你自己希望未来在哪些方面能有提高？</li>
<li>有什么我能为你做的事情？</li>
</ul>


<p>我大概保持每个月和每个组内同事都有一次一对一沟通，有很多时候，我是通过「请他们吃饭」来完成的。一对一沟通需要一个舒适的环境，所以在咖啡厅或饭桌上，可能都比在办公室的效果要好一些。</p>

<p>一对一沟通的另一个核心要素是要坦诚，这就像 Scrum 指南中用「游戏规则」来描述内容一样，如果管理者做不到坦诚，那么同事就不会把这当作是一次有效的沟通机会。坦诚的沟通方式是：所有问题都真诚的回答，不掩饰问题，也不回避问题。如果沟通双方能够做到坦诚，即使是一个棘手的问题，那么双方也会从「解决问题」的角度，尽量寻找可能的办法。</p>

<p>除此之外，定期组织一些团队活动，让团队每个人之间建立友谊，也是我努力在做的。这在很多大公司是 HR 部门做的事情，在我们创业公司里面，也变成团队负责人的工作之一了。</p>

<h3>什么是领导力</h3>

<p><img src="/images/become-a-tech-leader-book.jpg"></p>

<p>关于管理团队，我也特别喜欢《成为技术领导者》一书中的观点，关于本书，更多的请见<a href="http://blog.devtang.com/blog/2015/08/01/become-a-tech-leader-summary/">《成为技术领导者》读书心得》</a>。书中是这么说的：</p>

<blockquote><p>所谓领导力，就是创造这样一个环境，每个人都能在其中发挥出更多的能力。</p></blockquote>

<p>我想：在强调平等、创新、自由的互联网公司里面，这可能就是领导力最好的定义吧。</p>

<h2>管理技术</h2>

<p>作为一个技术负责人，产品在技术上的架构是否合理？随着用户量的增长，现有架构能否胜任？当运营活动发生时，突发的流量会有多少，服务器是否能够承受住压力？未来技术上的架构应该如何演进？除了服务器端，客户端应该在哪些技术方案上投入研究力量？这些都是技术负责人需要考虑和决策的。</p>

<p>我同时做过服务器端和移动端的开发工作，不过由于最近几年都是做移动端的开发，所以服务器端的架构技术细节我其实并不是专家。所以我在这方面做得算不上很好。可能是运气好吧，有几次服务器的压力问题，我们都及时发现并且解决了，但是时间都挺紧迫的。现在，我会花时间把服务器端的架构图画出来，然后一块一块考虑，看看有没有更优的方案，并且和服务器端的同学讨论。</p>

<p>在客户端上，我只是对 iOS 开发比较熟悉，对 Android 了解得并不深入。所以我会让技术同学自己提一些技术改进方案，我参与 Review，我想他如果能说得有理有据，还是可以授权他在技术上深入的。</p>

<p>其实每个平台的技术管理可能都需要更多的「授权」，因为具体做事情的人，会比技术管理者更清楚地了解细节。而对细节的深入了解，才是改进技术架构的方案来源。所以，尽量招靠谱的人，那么在管理技术上的工作就只需要遵守「尽量授权」的原则来就可以了。</p>

<p>管理技术还包括公司技术氛围的建立，我主要在以下这些方面下了一些工夫：</p>

<ul>
<li>推进技术 wiki 的使用</li>
<li>推进 iOS 端每周一次的技术分享</li>
<li>推进 Code Review 以及代码质量</li>
</ul>


<p>Wiki 是一个非常好用的知识管理工具，前提是每个同事都参与贡献内容。所以作为一个管理者需要用言行来指导新同事学会用 Wiki。我会主动将重要内容记录在 wiki 上，对于一些同事发的邮件内容，我也会要求他整理到 wiki 上。</p>

<p>iOS 端的技术分享也是需要管理者推进的。我之前在网易有道的时候，这方面的活动基本上是大家自愿的方式来进行。这其实对分享者要求很高，一般的人很难达到这种意识，所以当时有道 iOS 端的技术分享很少。因此，我还是认为「半强制」的分享方式更适合当前团队。</p>

<p>「半强制」的分享规则需要大家认同，在一个相对轻松的环境下达成一致，为此我专门组织了一次交流会，大家相互认识一下，一顿吃喝之后，再约定分享规则。现在看起来，大家其实有很多想分享的内容，在 Wiki 上，很多一两个月才轮到他的人，都已经把分享的主题确定了。</p>

<p>Code Review 也是一个需要推动的事情，我们使用 Git 和 Gerrit，做到了所有的提交必须 review 通过之后，才能 merge 进代码仓库。另外我们也在 wiki 上规定了详细的代码风格要求。Code Review 如果做得好，不但可以在代码风格上达成一致，还能让新同事从中学习到一些良好的编程习惯，一些潜在的 Bug 也可能在 Code Review 中被发现，实在是值得坚持的事情。</p>

<h2>产品负责人</h2>

<p>除了技术负责人的管理业务，管理团队，管理技术工作外，我另外还是小猿搜题的产品负责人，所以我还承担着技术负责人之外的一些工作。这些工作最主要的就是对产品的管理工作。</p>

<p>产品工作看似简单，实则复杂，而我作为一个工作多年的程序员，在这方面的经验非常少。所以我在参与产品讨论时，一开始都比较惶恐。后来我慢慢发现，产品经理的思维还是有章可循，便开始总结和学习，我看了不少产品经理的书，而郭常圳的多次指导也对我的帮忙意义巨大。其实做产品的原则就那么多，重要的还是多思考和体会，把那些原则融入自己的理解。</p>

<p>「场景化思维」是我学到的第一点，我还记得郭常圳带着我们学习乔布斯推出第一代 iPhone 时的演讲，乔布斯非常会讲故事，在用户具体的场景中介绍自己的产品。好的产品经理会将自己「代入」目标用户的使用场景中，解决用户的主要痛点和问题。做为技术人员，我常常陷入产品逻辑完备的泥潭中，但是「场景化思维」使得我能够重新跳出细节，关注主要功能设计是否合理。</p>

<p>「关注数据」是我学到的第二点，产品经理在打磨细节方面，如果能够关注产品数据，那么就很容易找到改进的方向，并且在后期验证自己的想法。关于这个，详细的请看：<a href="http://blog.devtang.com/blog/2015/09/02/why-we-need-monitor-data/">数据的秘密（上）- 为什么要关注数据</a> 和 <a href="http://blog.devtang.com/blog/2015/09/03/how-to-monitor-data/">数据的秘密（下）- 如何分析数据</a>。</p>

<p>我曾经犹豫自己是否应该学习写产品稿，郭常圳说不用，他说你只需要多看产品经理的产品稿，多思考和比较，慢慢就会有产品的感觉。我发现这一点还是管用的。以前用一个新的 App，作为开发者，我会关注它的功能在技术上如何实现，而我现在，不光会关注技术实现，还会想它的产品设计思路。打开了这扇窗户后，我就能在日常生活的每一天里，通过思考来提升自己的产品能力。</p>

<p>作为产品负责人，我主要的工作是参与产品稿的评审和美术稿的评审，同时会参与决定未来要做的功能，将其安排到产品工作中。另外，我也会关注产品的各项指标数据，保证重要的产品数据都是看过的。</p>

<p>我每周花在产品评审和美术评审大概是半天到一天，每周花在关注产品各项指标数据上的时间大概是半天到一天。</p>

<h2>我做得不好的地方</h2>

<p>做为一个技术转管理的新人，我觉得我的工作还是有挺多问题。</p>

<p>首先，我刚开始还是太迷恋技术了，有一些开发工作我仍然主动参与。但是实践之后发现，因为我的事情太多太杂，使得我很难保证自己承担的开发工作的进度。所以我现在学会主动把任务交给别人做，如果一件事情不是必须我才能做的，我就交给别人。所以现在技术上，我只参与 iOS 端的 Code Review 工作了。我将更多的精力，放在一些不得不由我做的沟通和项目推进方面的工作上。</p>

<p>接着，我有很长一段时间没能很好地安排好产品计划和研发的进度。好的产品计划应该要领先开发一个以上的迭代周期，这样在技术开发当前版本时，下一个版本功能就在设计和评审当中，使得大家的工作都不受影响。而小猿搜题的产品计划有一阵一直没能很舒服地领先技术，这让很多时候开发同事并不舒服。</p>

<p>解决的办法是我们让产品文档的完成时间点也尽量精准，对于一个大的产品功能设计，我们会定好初版（我们内部叫做 1 版本）、详细版（我们内部叫 5 版本）、完善版（我们内部叫 9 版本）的时间点。产品经理需要努力在时间点内保证产出，这样其实反倒使得大家会关注产品设计的主要问题，在细节上不过分纠结。</p>

<p>最后，我在招聘上的成绩也比较一般，没有能够为团队招来很多有经验的人，所以小猿搜题现有团队还是新人居多。新人的好处是容易和团队文化保持一致，但是在经验上，还是需要更多的锻炼。</p>

<h2>总结</h2>

<p>小猿搜题从 2014 年 7 月 17 日立项，到 10 月上线，再到元旦正式对外推广，到现在在不到一年的推广时间内，已经积累了超过 5000 万的用户。而我，也随着小猿搜题，从一个纯技术的 iOS 程序员，成长成为它的产品技术负责人，虽然也犯了一些错误，我感觉自己的进步还是很快的。</p>

<p>我也希望我的故事能够激励其他的技术同行，能够勇敢地接受新的挑战。在快速变化的移动互联网时代，快速迭代演进的不止有 App，也包括我们自己，愿大家都能活得精彩！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浅析一对一沟通]]></title>
    <link href="http://blog.devtang.com/blog/2015/10/25/one-on-one-summary/"/>
    <updated>2015-10-25T18:06:42+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/10/25/one-on-one-summary</id>
    <content type="html"><![CDATA[<h2>引言</h2>

<p>一对一沟通，又被称作一对一会议、One-on-one 等，是互联网公司常用的沟通方式。一对一沟通虽然被广泛使用，但是涉及的文章却很少，我主要通过两本书来获得它的一些知识，这两本书是<a href="https://book.douban.com/subject/5431183/">《格鲁夫给经理人的第一课》</a>和<a href="https://book.douban.com/subject/26306686/">《创业维艰》</a>。</p>

<p>这两本书的作者都非常有名，<a href="http://baike.baidu.com/view/1659256.htm">格鲁夫</a>是 Intel 公司的总裁，成功带领 Intel 公司完成了从半导体存储器到微处理器的转型。《创业维艰》的作者本·霍洛维茨是硅谷的顶级 VC，投资了 Facebook、Twitter 等公司。</p>

<p>除此之外，我本人也是一对一沟通的实践者，从刚毕业踏入职场开始，我就经历着一次又一次的一对一沟通。</p>

<p>在本文中，我们将浅析一对一沟通的细节。</p>

<h2>概述</h2>

<p>在<a href="https://book.douban.com/subject/5431183/">《格鲁夫给经理人的第一课》</a>一书中，格鲁夫对「一对一沟通」的介绍如下：</p>

<blockquote><p>在英特尔，一对一会议通常是由经理人召集他的部属召开的，这也是维系双方从属关系最主要的方法。一对一会议主要的目的在于互通信息以及彼此学习。经过对特定事项的讨论，上司可以将其技能以及经验传授给下属，并同时建议他切入问题的方式；而下属也能对工作中碰到的问题进行汇报。</p></blockquote>

<p>在我看来，一对一沟通的意义是可以使得信息从下而上地传递。从而获得在其它渠道不易获得的信息，保证透明。</p>

<p>讲一个我自己的故事。我有一阵子在开发中饱受产品调整之苦，很多时候刚刚做完一个产品功能的开发，然后产品需求就改了。对于一个对代码「有爱」的人来说，刚刚写完的几千行的代码要删掉，这个心情是非常沮丧的。</p>

<p>于是我就在一次和郭老大的一对一沟通中提出了这个问题。郭老大在表达同情之后，邀请我参加了一次产品的讨论会。在产品讨论会中，我看到大家都非常努力地在讨论产品方案，从而了解到，产品同事也非常不容易，他们需要在非常有限的时间内做出完整的产品方案，所以难免出现小的调整。而对于创业公司来说，「按时交付」是第一优先级的事情，所以我在这之后，接受产品调整的心态上就好受了很多。</p>

<p>我想这就是一次成功的一对一沟通。它首先让我的糟糕心情得到了宣泄，另外，它化解了我对于产品同事的抱怨，通过参与产品讨论，我甚至产生了对他们也不容易的「同理心」，能够理解他们也是在不得已的情况下，才调整产品方案的。最终，我们都接受了软件开发中的不完美，为了保证创业中按时交付，快速迭代的做事方式，和产品同事一起努力把事情做好。</p>

<h2>适合讨论的问题</h2>

<p>从我刚刚的故事中，大家可以看到，「倾诉焦虑」适合用来做为一对一沟通的内容。其实，适合作为一对一沟通的内容还包括：</p>

<ol>
<li>不成熟的看法</li>
<li>迫在眉睫的问题</li>
<li>精彩的想法</li>
<li>倾诉焦虑</li>
<li>抱怨</li>
</ol>


<p>以上这些内容，除了在一对一沟通中交流之外，很难找到别的渠道来有效解决。比如，对一些公司做事方式的不成熟看法或误解，如果是和同事在私下讨论，可能让误解加深。又比如，在和同事合作中产生的抱怨，如果将抱怨公开，很可能造成不好的影响。</p>

<p>一对一沟通构造了一个渠道，这个渠道自下而上，使得以上这些内容都能够被倾听，从而被解决。</p>

<p>因为这是一个「自下而上」的渠道，所以员工的主动性就非常重要。在一对一沟通中，上司多听少说，让员工成为沟通的中心。上司应该引导员工表达他的核心观点（如果有的话）。如果可能，也可以试试让员工来安排一对一沟通。</p>

<h2>建立舒适的沟通环境</h2>

<p>你会对一个陌生人敞开心扉吗？显然不会。那如果上司和员工平常极少聊天和沟通，那他们就不太容易讨论尖锐的问题。所以，上司应该尽可能和员工建立友谊。平时多聊聊天，在休息的时候聊些工作无关的话题，组织团队的 Team Building 活动，都有助于大家成为朋友。</p>

<p>另外，如果大家沟通的时候是坐在办公室里，那么员工的心情是不那么放松的，因为办公室始终是一个讨论工作的环境，让人无法放松。可能的话，可以尝试找一个公司的休息区，坐在沙发上沟通，或者直接走出公司，找一个咖啡厅点杯饮料，在咖啡厅里面聊天，都是不错的选择。</p>

<p>如果能请员工吃个饭，然后饭后聊聊天，散散步走一走，那么就更棒了。舒适的沟通环境有助于双方在放松的心情下交流，有助于大家更加平等地对话。</p>

<h2>保持真诚</h2>

<p>沟通要有效，保持真诚是必要的前提，否则员工不可能将心中的问题提出来。</p>

<p>保持真诚需要不敷衍任何员工提出的问题，不管这个问题有多尖锐。如果你也不知道如何解决这个问题，不妨和员工一起讨论讨论，看看员工能不能一起寻找可行的办法。切忌不要讲空话和套话，一旦员工发现这是一个无效的沟通渠道之后，「自下而上」的通道就被关闭了。</p>

<p>保持真诚也需要坦白和诚实，坦白使得沟通双方能够尽可能地保证透明。足够的透明才能让员工理解上司的想法，从而达到双方考虑问题的方式一致，进一步言行一致后，大家就会产生近似的处事方式，上司就可以将事情充分授权给员工了。</p>

<p>但是，坦白也不是说不留秘密，如果一个问题你觉得不方便讨论，就坦白地说不方便讨论，并且如果可能，尽量给出理由。</p>

<h2>适当引导</h2>

<p>并不是每一个员工都懂得一对一沟通的重要性，也不是每一个员工都能主动倾述问题，寻求帮助。很多程序员的性格都是比较内向的，有一些甚至不善于表达自己。</p>

<p>所以，虽然员工是一对一沟通的「主角」，但是上司也是需要进行适当的引导。对于上司已经发现的员工工作中的困难，可以适当的主动提出来，以便于更好地讨论，这也会让员工感到很体贴。</p>

<p>如果员工没有问题，一对一沟通也可以用于上司向员工传授工作经验和技巧渠道，这样员工可以向上司学习各种知识。</p>

<p>如果没有什么谈的，适合用来引导的问题也包括：</p>

<ul>
<li>当前产品还有哪些可以提高的地方？</li>
<li>我们部门的最大问题是什么，为什么？</li>
<li>如果有，你觉得工作中有哪一点令你感觉不舒服？</li>
<li>你觉得谁的工作最优秀，为什么？</li>
<li>假如你是我，你会做何调整？</li>
<li>我们的产品哪方面不尽如人意？</li>
<li>我们错失的最大机遇是什么？</li>
<li>哪些是我们应该做而没有做的？</li>
<li>你自己希望未来在哪些方面能有提高？</li>
<li>有什么我能为你做的事情？</li>
</ul>


<h2>沟通的频率</h2>

<p>一对一沟通应该多久一次？在《创业维艰》一书中，本·霍洛维茨认为一对一沟通需要保证至少一个月一次。而格鲁夫认为，需要根据部属对工作的熟悉度，而进行不同程度的掌控。如果他处理的是新项目，你应该提高和他沟通的频率；反之，如果他对这个项目已经游刃有余，你可能一个月一次就够了。</p>

<p>另外，格鲁夫还认为，事情变化的速度也是影响一对一沟通频率的因素。比如市场和产品的变化就比技术的变化要快，所以市场部门的一对一沟通可能需要更频繁一些。</p>

<p>所以，并没有不变的沟通频率，但是几个月都不沟通明显是不太合适的。</p>

<h2>沟通的时长</h2>

<p>一个问题要展开进行讨论和交流，15 分钟肯定是不够的，所以一对一沟通需要留有足够的时间。通常为了保留足够的 buffer，一对一沟通都至少是一个小时，并且可以根据实际讨论的内容有适当地延长。</p>

<h2>沟通的效果</h2>

<p>除了能够帮助员工有效地解决问题之外，一对一沟通还有以下效果。</p>

<h3>成功授权</h3>

<p>格鲁夫称「一对一会议有巨大的杠杆率」，因为这都是通过上司和下属间建立起共同的信息基础，以及近似的处事方式来达成的。这也是要达到「成功授权」的唯一途径。</p>

<h3>相互学习</h3>

<p>如果上司想作好决策，那么他在会议中「从下属身上学到的东西」也同样很重要。格鲁夫说他对于 Intel 的很多决策想法，都是来自于一对一沟通中员工的意见。格鲁夫是一个程序员出行，他不懂制造和供应链，但是不影响他在一对一沟通中，从员工中学习这方面的知识，从而做出相应的决策。</p>

<h3>家庭生活</h3>

<p>格鲁夫说，他有两个正值青春期的女儿，他尝试在家里的餐厅和孩子进行一对一沟通，在那个相对私密的场合，他们可以较严肃地谈一些细微且复杂的事情。</p>

<p>所以我惊喜地发现，一对一沟通对于家庭成员之间同样有效。</p>

<h2>总结</h2>

<p>一对一使得企业里面的组织，产生了自下而上的沟通渠道，从而能够使得组织内的每一个人更加舒服地工作，让团队凝聚力更强。</p>

<p>本质上来说，一对一沟通就是构建一个私密的、轻松的、真诚的、有效的环境，两个人在一起讨论问题和相互学习。理论上，不管是公司内的管理，还是公司之间的合作，还是朋友之间的相处，还是家庭成员之间的交流，一对一沟通都能够发挥出它的效果。</p>

<p>看了这篇文章，明天你打算和谁来一场「一对一沟通」？</p>

<h3>版权说明</h3>

<p>本文为 InfoQ 中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/articles/analysis-of-one-to-one-communication#rd">文章链接</a>。如需转载，请与 InfoQ 中文站联系。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写给那些傻傻的，想做服务器开发的应届生]]></title>
    <link href="http://blog.devtang.com/blog/2015/10/07/why-fresh-wants-to-do-server-dev/"/>
    <updated>2015-10-07T12:05:50+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/10/07/why-fresh-wants-to-do-server-dev</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>猿题库刚刚结束了北京地区的大规模校园招聘，国庆之后打算转战外地进行校招。我本人深度参与了此次的校招工作，包括笔试题命题、面试题命题以及具体的面试工作。</p>

<p>我在面试中发现了一个非常有意思的现象，就是大多数应届生都想做服务器端开发，但是他们却又不清楚服务器端开发具体要做些什么。</p>

<p>我和同事聊天的时候说起此事，我们认为可能应届生觉得：做服务器端开发可以让自己写的程序运行在很多台机器上，并且处理海量的数据，这很「牛逼」。而做客户端或前端开发太简单，成长会比较小。</p>

<p>于是我就写了本文，想给这些单纯的应届生泼泼冷水。先说说我的背景吧，我同时做过服务器端和客户端的开发。我在网易有道做过 1 年半的服务器端开发，产品涉及网易邮箱和微博产品，之后做了 3 年的 iOS 开发，产品涉及有道云笔记，猿题库和小猿搜题，所以我能够给大家分享服务器端和客户端开发的差别。</p>

<h2>对服务器开发的误解</h2>

<p>很多应届生认为做服务器端开发可以处理海量数据，管理上百台服务器。</p>

<p>但是 &mdash;&mdash;</p>

<p>处理海量数据就牛逼了？NO！</p>

<p>服务器端开发经过多年的发展，对于海量数据的处理早有了很多固定的解决方案。不管是用云服务，还是用 Hbase ，你都可以很轻松地依赖开源库，解决海量数据的存储问题。</p>

<p>还有一些同学想做大数据分析，如果你写过 MapReduce 程序就不会这么想了。现在的 MapReduce 程序写起来太 easy 了，很多时候简单到你就只需要写一条类似 SQL 的查询就行了。</p>

<p>运行在上百台服务器上就牛逼了？NO！</p>

<p>现在虚拟化技术发展迅猛，像小猿搜题所有服务都通过 Docker 来部署。很多时候，部署上线就是在 Web 管理界面上点击一个「Deploy」按钮即可。即使在过去，实际操作这些上百台服务器的也是运维同学，轮不到你来操作。</p>

<p>所以，除了 YY 一下这些程序跑在多个机器上，这并没有什么可以带来成就感的地方。</p>

<p>还有一些应届生觉得自己在学校做过网站，觉得在服务器开发方面有基础，做这方面更顺手。NO！企业里面的服务器开发完全不是你想的那样，基本上大家在学校做网站的经验等于零。</p>

<h2>服务器开发的苦</h2>

<p>我给大家分享一下做服务器开发有什么苦的地方吧。</p>

<h3>永远只能半夜上线</h3>

<p>做为互联网公司，我们希望给用户提供 7 x 24 的不间断服务，那么服务万一需要中断怎么办？半夜上线呗。</p>

<p>根据我多年的观察，晚上 12 点一般都是上网高峰，所以上线一般都是凌晨 3 点-4 点的时候进行。但是，你以为上线就是凌晨 3 点点一下「Deploy」按钮就完了吗？NO! 一般上线都会涉及功能升级，难免会有考虑不周到的情况，于是就会发生，上线出问题的情况。</p>

<p>上线出问题怎么办？在网易，我们一般是两种做法：</p>

<ol>
<li>在线调试和修改 Bug，通常顺利的话，到早上 7，8 点的时候一般就能搞定了。</li>
<li>在线调试和修改 Bug，如果不顺利的话，到早上 7，8 点的时候回滚数据。然后，我们需要回家休息半天之后，继续在下一个凌晨 3 点上线。</li>
</ol>


<p>当然，不会每次上线都是这种大升级，但是基本上，1、2 个月搞一次这种大上线还是挺常见的。</p>

<p>相对来说，客户端同学在这方面要轻松得多。iOS 和 Android 都是提交应用市场审核，所以客户端的同学可以选一个白天上班的时候提交审核，而不用等到半夜。</p>

<h3>永远需要立即响应</h3>

<p>服务器端的问题，只要出现，影响都是巨大的，所以服务器端的同学需要随时待命，一旦有服务器异常报警，就立即处理，以免影响到用户。所以做服务器开发的同学手机都是开着的，在服务不稳定时，一不小心，几十条报警短信就过来了。服务器开发出去旅游什么的，一般都带着笔记本，以便出问题时能够及时响应。</p>

<p>相对来说，客户端同学在这方面要轻松得多，因为即使出现了 Bug，iOS 和 Android 客户端也是无法马上修复的，因为用户手机中的版本不会立即更新。所以客户端同学最多也是加班发布一个紧急版本提交审核，在时间上不会像服务器端那么着急。</p>

<p>另一方面，很多客户端的 Bug，可以通过服务器端通过一些「兼容」来处理，这其实就是替客户端「擦屁股」。例如，假设某应用的 iOS 1.2.0 版本当获得服务器端返回的用户头象是 png 格式的时候会闪退，那么服务器端可以特殊处理，对于这个版本的应用把 png 图片转成 jpg 返回。你看，最终还是服务器端同事成了要立即响应的人。</p>

<h3>服务器端轮子太多</h3>

<p>服务器端的开发经过了 10 多年的发展，而客户端的开发才刚刚兴起。2009 年 <a href="https://en.wikipedia.org/wiki/IPhone">iPhone 3GS</a> 推出之后，国内才有人做 iOS App 的开发，Android 开发的兴起也基本在<a href="https://en.wikipedia.org/wiki/Android_version_history">同一时期</a>。算下来，客户端的开发才经历了 6 年而已。而服务器端的开发呢？光 <a href="https://en.wikipedia.org/wiki/Spring_Framework">Spring</a> 就出现了 10 多年了。</p>

<p>服务器端的技术长久发展的结果就是，基本上每个业务需求都已经有现成的轮子了。所以做服务器端开发很多时候就是学习各种开源组件的用法，并且熟悉这些组件的一些性能特点和坑。</p>

<p>你以为这很容易吗？其实不是的！这些轮子发展那么多年，已经非常复杂了，光 Spring 就包括非常多的特性，写一本 1000 页的书来介绍它也不为过。如果不是多年的使用，你能搞明白它的各种功能的优缺点吗？如果你搞不明白，遇到问题的时候除了抓瞎还能干嘛？</p>

<p>所以做服务器端的同学，要经过非常长时间学习（至少半年左右），才能上手进行实际的开发工作。上手之后，又需要经过非常长时间的学习，才能够熟悉自己使用的各种开源组件的特点和使用细节。</p>

<p>相对来说，客户端同学在这方面要轻松得多，基本上不管是 iOS 还是 Android，新手只需要一个月左右就能入门，三个月左右就能够比较熟练了。</p>

<h3>分工与细化</h3>

<p>刚刚说到服务器端复杂，这带来的结果就是分工与细化。每个做服务器开发的同学，可能只会涉及服务器开发的某一部分的业务逻辑和功能，甚至是某一部分业务逻辑的某一层。比如我在网易邮箱做服务器端开发时，就只是负责 Restful Api 这一层的开发工作。</p>

<p>从业务上来说，将复杂的系统拆分，然后每个人做独立的某一块当然是好的。但是对个人来说，服务器端开发却使终是一块迷雾环绕的大山，在这座大山上，你对你走过的路线很熟悉，而那些你没有接触过的服务器端技术，你使终是不清楚的。</p>

<p>对于一个服务器端开发同学，特别是进入大公司的应届生来说，在他头几年的工作中，肯定只会围绕着非常小一块功能业务来学习，那么一两年之后，他顶多是熟悉了他工作涉及的那些东西，对于别的东西仍然是不清楚的。</p>

<p>从这一点来说，去创业型的公司做服务器端开发又要比去大公司要好得多。</p>

<p>相对来说，客户端同学在这方面要爽得多。因为移动开发技术刚刚兴起，很多技术方案和框架还没有复杂到无法全面掌握的程度。移动开发技术就像一棵快速成长的小树，客户端同学将有幸伴随着它一起成长，等 5 年之后，移动开发技术成变成一棵参天大树，这一代的程序员，将会是唯一亲身经历它演进的人，每一处演进带来的改变，都将使得我们更加深刻理解移动开发系统的设计原则。</p>

<h3>眼界和非技术成长</h3>

<p>某种程度上说，服务器端开发在业务方面是轻松的，因为他们只需要设计好 API 接口，返回 JSON 数据，不用考虑 UI 的设计，交互细节的处理。服务器端开发经过了多年的发展，单元测试和性能测试框架也非常成熟，所以开发起来非常有章法。</p>

<p>所以服务器端的同学大多数时候只需要关注纯技术的知识，例如如何保证高可用，高扩展性，高并发，数据一致性，数据安全等。</p>

<p>客户端就苦了，UI 需要和美术设计得完全一样，交互细节还需要做到流畅，很多时候产品用一用觉得一些 UI 和交互有问题，我们还需要被迫接受调整。另外在测试上，因为和界面耦合太紧，虽然业界有一些解决方案，但基本上不管是 iOS 和 Android 都还没有非常成熟好用的单元测试框架。大部分的测试工作都是由黑盒的手工测试完成的。</p>

<p>但是，正因为客户端需要密切和产品经理，UI 设计师打交道，所以他们会频繁接触到产品设计思想和设计思想。这使得客户端的同学更加容易学习和积累编程之外的技能，包括产品和设计的思想以及沟通能力。另外，因为用户的 bug 都是通过客户端反馈，客户端同学还更容易接触到真实的用户。</p>

<p>所以相对于服务器端同学来说，客户端的同学的眼界更宽，由于非技术方面的沟通更多，所以他们的非技术方案的成长也越多。</p>

<h3>技术挑战和工资待遇</h3>

<p>从纯技术上的挑战来说，服务器端明显更大。服务器端开发动辄超过 10 人的团队，代码量稍微复杂一些就是接近百万行。而客户端一个平台的研发大多数也就在 5 人左右，代码量多在 10 万行以内。</p>

<p>但是，技术挑战大就表示工资待遇高吗？NO！市场价格是由供求关系来平衡的。虽然客户端的技术挑战小，但是基本上所有应届毕业生都想做服务器端开发，所以没有人做客户端开发呀！于是很多公司被迫从培训机构招人，很多人刚刚培训了 3 个月，就可以拿非常高的工资。这一点和 Web 前端类似，牛逼的 Web 前端人才非常少，但是不影响这个领域稍微牛逼一点的人拿非常高的薪水。</p>

<p>另一方面，由于服务器端人才的饱和，也使得竞争变得非常激烈，除非你成为这个领域的顶级人才，否则从平均薪资来说，做客户端开发的同学应该和服务器端的同学类似。</p>

<h2>总结</h2>

<p>其实我这篇文章故意写得很片面，目的就是想让各位应届生同学们能够更加辩证地看待互联网行业中的工作。与其什么都不懂傻傻地选择服务器端开发，倒不如做客户端开发更有前途。</p>

<p>我以上所说的，都是错的。</p>
]]></content>
  </entry>
  
</feed>
